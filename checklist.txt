# DokaLab Blog 리팩토링 체크리스트

## 1. 코어 유틸리티 및 공통 모듈 개선
1. [X] Navigation 컴포넌트 로직 분리 - 네비게이션 상태 관리 훅으로 추출
2. [X] 환경변수 설정 검증 로직 개선 - config/env.ts 타입 안전성 강화  
3. [X] API 서비스 에러 핸들링 통합 - lib/api/base.ts 생성하여 공통 로직 집중화
4. [X] 공통 타입 정의 정리 - lib/types/common.ts 생성하여 중복 타입 제거

## 2. 블로그 기능 모듈화
5. [X] 블로그 포스트 렌더링 로직 분리 - components/blog/PostRenderer 모듈 생성
6. [X] 메타데이터 생성 로직 모듈화 - lib/metadata/generator.ts 생성
7. [X] 블로그 서비스 레이어 개선 - lib/api/blog.ts의 에러 핸들링 및 캐싱 로직 강화
8. [ ] 카테고리 관리 로직 분리 - lib/blog/categories.ts 모듈 생성

## 3. 마크다운 및 에디터 최적화  
9. [ ] CodeMirror 동적 로딩 완료 - admin 에디터 번들 사이즈 최적화
10. [ ] 마크다운 렌더러 컴포넌트 분리 - 구문 강조, 수식, 다이어그램 각각 독립 모듈화
11. [ ] 에디터 플러그인 시스템 구축 - CodeMirror 익스텐션을 플러그인 형태로 관리
12. [ ] 마크다운 파서 설정 중앙화 - lib/markdown/config.ts 생성

## 4. 레이아웃 및 스타일링 개선
13. [ ] Header 컴포넌트 로직 분리 - 모바일 메뉴 상태를 전역 상태로 관리
14. [ ] 반응형 디자인 미디어쿼리 중앙화 - styles/mixins.scss 개선
15. [ ] 다크모드 지원 시스템 구축 - 테마 관리 훅 및 컨텍스트 생성
16. [ ] 글로벌 스타일 변수 정리 - SCSS 변수 체계 재정비

## 5. 성능 및 SEO 최적화
17. [ ] 이미지 최적화 컴포넌트 생성 - Next.js Image 래퍼 with lazy loading
18. [ ] 폰트 로딩 최적화 - 웹폰트 preload 및 fallback 설정
19. [ ] 메타태그 생성 로직 개선 - SEO 최적화를 위한 structured data 추가
20. [ ] 번들 분석 및 최적화 - webpack-bundle-analyzer 설정 및 코드 스플리팅 개선

## 6. 타입 안전성 및 에러 처리
21. [ ] API 응답 타입 가드 생성 - runtime 타입 검증 로직 추가
22. [ ] 에러 바운더리 컴포넌트 생성 - 클라이언트 에러 처리 개선
23. [ ] 로딩 상태 관리 표준화 - 공통 로딩 훅 및 컴포넌트 생성
24. [ ] 404/500 에러 페이지 개선 - 사용자 경험 향상

## 7. 개발 환경 및 빌드 최적화
25. [ ] ESLint 규칙 정리 - 프로젝트 표준에 맞는 규칙 설정
26. [ ] TypeScript 설정 최적화 - 엄격한 타입 체크 활성화
27. [ ] 개발 서버 설정 개선 - HMR 및 디버깅 환경 최적화
28. [ ] 빌드 스크립트 개선 - 프로덕션 빌드 최적화 및 검증 자동화

## 8. 테스트 및 문서화
29. [ ] 단위 테스트 기반 구축 - Jest 설정 및 주요 컴포넌트 테스트 작성
30. [ ] API 통합 테스트 준비 - MSW 설정으로 모킹 환경 구축
31. [ ] 컴포넌트 스토리북 설정 - UI 컴포넌트 문서화 및 독립 테스트
32. [ ] README 및 개발 가이드 작성 - 프로젝트 온보딩 문서 완성

---
진행 순서: 위에서부터 순차적으로, 한 번에 하나씩만 수행
각 항목 완료 후 빌드 테스트 필수 수행 